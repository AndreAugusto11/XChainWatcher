x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0.5, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14),
legend.position = "none",
axis.text = element_text(size = 10, face="bold"),
)
data_after <- merged_df %>%
filter((bridge == "ronin" & timestamp >= 1648508400) |
(bridge == "nomad" & timestamp >= 1659389551))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10() +
scale_fill_manual(
name = "Bridge Used",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 70, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(2/3, 1/3))
library(ggplot2)
library(scales)
format_seconds_to_days <- function(seconds) {
if (is.na(seconds)) return(NA)
if (seconds >= 86400) {  # 86400 seconds in a day
# Convert seconds to days
days <- seconds / 86400
sprintf("%s\n(%.2f days)",
scales::comma(seconds),
days)
} else if (seconds >= 3600) {  # 3600 seconds in an hour
# Convert seconds to hours
hours <- seconds / 3600
sprintf("%s\n(%.2f hours)",
scales::comma(seconds),
hours)
} else if (seconds >= 60) {  # 3600 seconds in an hour
# Convert seconds to hours
mins <- seconds / 60
sprintf("%s\n(%.2f minutes)",
scales::comma(seconds),
mins)
} else {
# Just format seconds with commas
scales::comma(seconds)
}
}
df <- read.csv('../cross-chain-rules-validator/analysis/ronin-bridge/data/combined_cctxs.csv')
df <- df[order(df$action, decreasing=TRUE), ]
df <- df[df$value_usd > 0.000001, ]
p <- ggplot(df, aes(x = time_difference, y = value_usd, color = action)) +
geom_point(size = 1, alpha = 0.7) +
geom_vline(xintercept = 78, linetype = "dashed", color = "magenta", size = 0.5) +
geom_vline(xintercept = 45, linetype = "dashed", color = "royalblue3", size = 0.5) +
annotate("text", 100, 10000000000, hjust = .5, label = "Finality Times (45 & 78 seconds)", colour = "black") +
scale_color_manual(breaks = c("withdrawal", "deposit"), labels = c("CCTX_ValidWithdrawal", "CCTX_ValidDeposit"), values = c("royalblue3", "magenta")) +
scale_x_log10(
limits = c(10^1, NA),
labels = function(x) {
# Apply the custom formatting function to each tick mark
sapply(x, format_seconds_to_days)
}
) +            # Set the lower limit of the x-axis to 10^3, NA allows for an upper limit based on data
scale_y_log10(
breaks = scales::trans_breaks(log10, function(x) 10^x, 10),
labels = function(x) {
ifelse(x < 1,
scales::dollar_format(accuracy = 0.000001)(x),  # Maintains two decimal places for values < 1
scales::dollar_format()(x))                 # Default formatting for values >= 1
}
) +
labs(title = "CCTX Latency vs. CCTX Value Transferred (Ronin Bridge)",
x = "CCTX Latency (seconds)",
y = "CCTX Value (USD)",
color = "Datalog Rule") +
theme_minimal() +
theme(
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
plot.title = element_text(face = "bold", size = 15, hjust = 0.5, vjust=1),
panel.grid.major.y = element_line(color = 4,
size = 0.1,
linetype = 2),
panel.grid.major.x = element_line(color = 4,
size = 0.1,
linetype = 2),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=14, face="bold", vjust=-2),
axis.title.x=element_text(size=14, face="bold", vjust=-1),
legend.title = element_text(face = "bold", size=14),
legend.text = element_text(size = 10, family = "mono"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 13, face="bold"),
legend.position = c(0.81, 0.15),
legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid", color="lightblue")
)
print(p)
ggsave("./figures/test.pdf", width = "8.73", height = "4.56", units = "in")
p <- ggplot(df, aes(x = time_difference, y = value_usd, color = action)) +
geom_point(size = 1, alpha = 0.7) +
geom_vline(xintercept = 78, linetype = "dashed", color = "magenta", size = 0.5) +
geom_vline(xintercept = 45, linetype = "dashed", color = "royalblue3", size = 0.5) +
annotate("text", 100, 10000000000, hjust = .5, label = "Finality Times (45 & 78 seconds)", colour = "black") +
scale_color_manual(breaks = c("withdrawal", "deposit"), labels = c("Withdrawal", "Deposit"), values = c("royalblue3", "magenta")) +
scale_x_log10(
limits = c(10^1, NA),
labels = function(x) {
# Apply the custom formatting function to each tick mark
sapply(x, format_seconds_to_days)
}
) +            # Set the lower limit of the x-axis to 10^3, NA allows for an upper limit based on data
scale_y_log10(
breaks = scales::trans_breaks(log10, function(x) 10^x, 10),
labels = function(x) {
ifelse(x < 1,
scales::dollar_format(accuracy = 0.000001)(x),  # Maintains two decimal places for values < 1
scales::dollar_format()(x))                 # Default formatting for values >= 1
}
) +
labs(title = "CCTX Latency vs. CCTX Value Transferred (Ronin Bridge)",
x = "CCTX Latency (seconds)",
y = "CCTX Value (USD)",
color = "Datalog Rule") +
theme_minimal() +
theme(
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
plot.title = element_text(face = "bold", size = 15, hjust = 0.5, vjust=1),
panel.grid.major.y = element_line(color = 4,
size = 0.1,
linetype = 2),
panel.grid.major.x = element_line(color = 4,
size = 0.1,
linetype = 2),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=14, face="bold", vjust=-2),
axis.title.x=element_text(size=14, face="bold", vjust=-1),
legend.title = element_text(face = "bold", size=14),
legend.text = element_text(size = 10, family = "mono"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 13, face="bold"),
legend.position = c(0.81, 0.15),
legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid", color="lightblue")
)
print(p)
p <- ggplot(df, aes(x = time_difference, y = value_usd, color = action)) +
geom_point(size = 1, alpha = 0.7) +
geom_vline(xintercept = 78, linetype = "dashed", color = "magenta", size = 0.5) +
geom_vline(xintercept = 45, linetype = "dashed", color = "royalblue3", size = 0.5) +
annotate("text", 100, 10000000000, hjust = .5, label = "Finality Times (45 & 78 seconds)", colour = "black") +
scale_color_manual(breaks = c("withdrawal", "deposit"), labels = c("Withdrawal", "Deposit"), values = c("royalblue3", "magenta")) +
scale_x_log10(
limits = c(10^1, NA),
labels = function(x) {
# Apply the custom formatting function to each tick mark
sapply(x, format_seconds_to_days)
}
) +            # Set the lower limit of the x-axis to 10^3, NA allows for an upper limit based on data
scale_y_log10(
breaks = scales::trans_breaks(log10, function(x) 10^x, 10),
labels = function(x) {
ifelse(x < 1,
scales::dollar_format(accuracy = 0.000001)(x),  # Maintains two decimal places for values < 1
scales::dollar_format()(x))                 # Default formatting for values >= 1
}
) +
labs(title = "CCTX Latency vs. CCTX Value Transferred (Ronin Bridge)",
x = "CCTX Latency (seconds)",
y = "CCTX Value (USD)",
color = "Datalog Rule") +
theme_minimal() +
theme(
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
plot.title = element_text(face = "bold", size = 15, hjust = 0.5, vjust=1),
panel.grid.major.y = element_line(color = 4,
size = 0.1,
linetype = 2),
panel.grid.major.x = element_line(color = 4,
size = 0.1,
linetype = 2),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=14, face="bold", vjust=-2),
axis.title.x=element_text(size=14, face="bold", vjust=-1),
legend.title = element_text(face = "bold", size=14),
legend.text = element_text(size = 10, family = "mono"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 13, face="bold"),
legend.position = c(0.9, 0.15),
legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid", color="lightblue")
)
print(p)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(patchwork)
library(tidyr)
library(cowplot)
format_ether_value <- function(x) {
sapply(x, function(val) {
if (val < 1) {
format(val, scientific = FALSE, nsmall = 5, decimal.mark = ".", big.mark = "")
} else {
format(round(val), big.mark = ",", scientific = FALSE)
}
})
}
data_ronin <- read.csv('../cross-chain-rules-validator/analysis/ronin-bridge/data/dst_ethereum_addresses_with_ether.csv')
data_nomad <- read.csv('../cross-chain-rules-validator/analysis/nomad-bridge/data/dst_ethereum_addresses_with_ether.csv')
data_ronin$bridge <- "ronin"
data_nomad$bridge <- "nomad"
merged_df <- rbind(data_ronin, data_nomad)
threshold <- 0.0011  # Example threshold, adjust based on your data
x_limits <- c(0.0000001, 1000)
custom_breaks <- c(0.0000001, 0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000)
data_before <- merged_df %>%
filter((bridge == "ronin" & timestamp < 1648508400) |
(bridge == "nomad" & timestamp < 1659389551))
# Create the second histogram for balance_today_capped
p1 <- ggplot(data_before, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10() +
scale_fill_manual(
values = c("nomad" = "pink", "ronin" = "steelblue")
) +
annotate("text", x = 0.0002, y = 10000, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(a) distribution of balances of non-zero destination addresses in withdrawals before attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0.5, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14),
legend.position = "none",
axis.text = element_text(size = 10, face="bold"),
)
data_after <- merged_df %>%
filter((bridge == "ronin" & timestamp >= 1648508400) |
(bridge == "nomad" & timestamp >= 1659389551))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10() +
scale_fill_manual(
name = "Bridge Used",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 70, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(2/3, 1/3))
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(1/2, 1/2))
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(3/5, 2/5))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10() +
scale_fill_manual(
name = "Bridge",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 70, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(3/5, 2/5))
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(2/5, 3/5))
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(1/2, 1/2))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10(limits = c(1, 10000)) +
scale_fill_manual(
name = "Bridge",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 70, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(1/2, 1/2))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10(limits = c(1, 10000)) +
scale_fill_manual(
name = "Bridge",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 10000, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(1/2, 1/2))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10(limits = c(1, 8000)) +
scale_fill_manual(
name = "Bridge",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 10000, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(1/2, 1/2))
# Create the first histogram for balance_at_date_capped
p2 <- ggplot(data_after, aes(x=balance_at_date_ether, fill=bridge)) +
geom_histogram(bins=100, color="black", alpha=0.5) +
geom_vline(xintercept = threshold, linetype="dashed", color="red") +  # Add threshold line
scale_x_log10(limits = x_limits, breaks = custom_breaks, labels = function(x) {sapply(x, format_ether_value)}) +
scale_y_log10(limits = c(1, 10000)) +
scale_fill_manual(
name = "Bridge",
values = c("nomad" = "pink", "ronin" = "steelblue"),
labels = c("Nomad: (a) N=446 | (b) N=162", "Ronin: (a) N=5608 | (b) N=154")
) +
annotate("text", x = 0.0002, y = 8000, hjust = .5, label = paste(threshold, "ETH"), colour = "red", size=3.5, fontface="bold", family = "serif") +
labs(title="(b) distribution of balances of non-zero destination addresses in withdrawals after attack",
x="Balance (Ether)",
y="Frequency"
) +
theme_minimal() +
theme(
plot.margin = unit(c(0, 0.4, 0, 0), "cm"),
text = element_text(family = "serif"),
axis.line = element_line(colour = "black"),
panel.grid.major.y = element_line(color = 4, size = 0.1, linetype = 2),
panel.grid.major.x = element_line(color = 4, size = 0.1, linetype = 2),
plot.title = element_text(size = 10, hjust = 0.5, vjust=1),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_text(size=12, face="bold"),
axis.title.x=element_text(size=12, face="bold"),
legend.title = element_text(face = "bold", size=14, margin = margin(r = 5)),
axis.text = element_text(size = 10, face="bold"),
legend.position = "bottom",
legend.text = element_text(size = 11, margin = margin(r = 5)),
)
# Arrange the plots vertically
plot_grid(p1, p2, align = "v", nrow = 2, rel_heights = c(1/2, 1/2))
