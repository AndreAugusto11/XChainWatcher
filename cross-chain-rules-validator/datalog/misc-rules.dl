#include "acceptance-rules.dl"

/******************************************************************************************************/
/******************************* TRANSACTIONS REVERTED ON EITHER CHAIN ********************************/
/******************************************************************************************************/

.decl RevertedTransactions(timestamp:unsigned, source_chain_id:unsigned, transaction_hash:symbol, transaction_index:number, from:Address, to:Address, value:Amount, fee:symbol)
.output RevertedTransactions

RevertedTransactions(timestamp, chain_id, transaction_hash, transaction_index, from, to, amount, fee) :-
    transaction(timestamp, chain_id, transaction_hash, transaction_index, from, to, amount, 0, fee).

/******************************************************************************************************/
/************** TRANSACTIONS TRANSFERING NATIVE ETH TO SOURCE CHAIN - NO EVENT TRIGGERED **************/
/******************************************************************************************************/

.decl SC_RandomTransferEthToBridge(timestamp:unsigned, source_chain_id:unsigned, transaction_hash:symbol, from:Address, value:Amount)
.output SC_RandomTransferEthToBridge

SC_RandomTransferEthToBridge(timestamp, 1, transaction_hash, from, amount) :-
    transaction(timestamp, 1, transaction_hash, _, from, _, amount, 1, _),
    !sc_token_deposited(transaction_hash, _, _, _, _, _, _, _, _),
    !sc_token_withdrew(transaction_hash, _, _, _, _, _).

/******************************************************************************************************/
/************* TRANSACTIONS WITHDRAWING FUNDS TO THE ACTUAL BRIDGE CONTRACT (NOT TO USER) *************/
/******************************************************************************************************/

.decl SC_WithdrewTokensToBridge(timestamp:unsigned, transaction_hash:symbol, withdrawal_id:unsigned, beneficiary:Address, dst_token:Address, dst_chain_id:unsigned, amount:Amount)
.output SC_WithdrewTokensToBridge

SC_WithdrewTokensToBridge(timestamp, transaction_hash, withdrawal_id, beneficiary, dst_token, chain_id, amount) :-
    sc_token_withdrew(transaction_hash, bridge_event_index, withdrawal_id, bridge_address, dst_token, amount),
    (
        erc20_transfer(transaction_hash, chain_id, token_event_index, dst_token, bridge_address, bridge_address, amount);
        sc_withdrawal(transaction_hash, token_event_index, bridge_address, bridge_address, amount)
    ),
    transaction(timestamp, chain_id, transaction_hash, _, beneficiary, bridge_address, "0", 1, _),
    bridge_event_index > token_event_index.

/******************************************************************************************************/
/******************************** DEPOSITS WITHOUT MATCH (SOURCE CHAIN) *******************************/
/******************************************************************************************************/

.decl SC_DepositsWithoutMatch(origin_chain_id:unsigned, origin_timestamp:unsigned, origin_transaction_hash:symbol, dst_chain_id:unsigned, deposit_id:unsigned, origin_token:Address, dst_token:Address, sender:Address, beneficiary:Address, amount:Amount)
.output SC_DepositsWithoutMatch

SC_DepositsWithoutMatch(origin_chain_id, origin_timestamp, origin_transaction_hash, dst_chain_id, deposit_id, origin_token, dst_token, sender, beneficiary, amount) :-
    (
        SC_ValidERC20TokenDeposit(origin_timestamp, origin_transaction_hash, deposit_id, sender, _, beneficiary, dst_token, origin_token, origin_chain_id, dst_chain_id, _, amount);
        SC_ValidNativeTokenDeposit(origin_timestamp, origin_transaction_hash, deposit_id, sender, _, beneficiary, dst_token, origin_token, origin_chain_id, dst_chain_id, _, amount)
    ),
    !CCTX_Deposits(origin_chain_id, origin_timestamp, origin_transaction_hash, dst_chain_id, _, _, deposit_id, origin_token, dst_token, sender, beneficiary, amount).

/******************************************************************************************************/
/******************************** DEPOSITS WITHOUT MATCH (TARGET CHAIN) *******************************/
/******************************************************************************************************/

.decl TC_DepositsWithoutMatch(dst_chain_id:unsigned, dst_chain_timestamp:unsigned, dst_transaction_hash:symbol, deposit_id:unsigned, dst_token:Address, beneficiary:Address, amount:Amount)
.output TC_DepositsWithoutMatch

TC_DepositsWithoutMatch(dst_chain_id, dst_chain_timestamp, dst_transaction_hash, deposit_id, dst_token, beneficiary, amount) :-
    TC_ValidERC20TokenDeposit(dst_chain_timestamp, dst_transaction_hash, deposit_id, beneficiary, dst_token, dst_chain_id, amount),
    !CCTX_Deposits(_, _, _, dst_chain_id, dst_chain_timestamp, dst_transaction_hash, deposit_id, _, dst_token, _, beneficiary, amount).

/******************************************************************************************************/
/****************************** WITHDRAWALS WITHOUT MATCH (TARGET CHAIN) ******************************/
/******************************************************************************************************/

.decl TC_WithdrawalsWithoutMatch(origin_chain_id:unsigned, origin_timestamp:unsigned, origin_transaction_hash:symbol, withdrawal_id:unsigned, origin_token:Address, dst_token:Address, sender:Address, beneficiary:Address, amount:Amount)
.output TC_WithdrawalsWithoutMatch

TC_WithdrawalsWithoutMatch(origin_chain_id, origin_timestamp, origin_transaction_hash, withdrawal_id, origin_token, dst_token, sender, beneficiary, amount) :-
    (
        TC_ValidERC20TokenWithdrawal(origin_timestamp, origin_transaction_hash, withdrawal_id, sender, _, beneficiary, origin_token, dst_token, dst_chain_id, origin_chain_id, _, amount) ;
        TC_ValidNativeTokenWithdrawal(origin_timestamp, origin_transaction_hash, withdrawal_id, sender, _, beneficiary, origin_token, dst_token, dst_chain_id, origin_chain_id, _, amount)
    ),
    !CCTX_Withdrawals(origin_chain_id, origin_timestamp, origin_transaction_hash, dst_chain_id, _, _, withdrawal_id, origin_token, dst_token, sender, beneficiary, amount).

/******************************************************************************************************/
/****************************** WITHDRAWALS WITHOUT MATCH (SOURCE CHAIN) ******************************/
/******************************************************************************************************/

.decl SC_WithdrawalsWithoutMatch(dst_chain_id:unsigned, dst_timestamp:unsigned, dst_transaction_hash:symbol, withdrawal_id:unsigned, dst_token:Address, beneficiary:Address, amount:Amount)
.output SC_WithdrawalsWithoutMatch

SC_WithdrawalsWithoutMatch(dst_chain_id, dst_timestamp, dst_transaction_hash, withdrawal_id, dst_token, beneficiary, amount) :-
    SC_ValidERC20TokenWithdrawal(dst_timestamp, dst_transaction_hash, withdrawal_id, beneficiary, dst_token, dst_chain_id, amount),
    !CCTX_Withdrawals(_, _, _, dst_chain_id, dst_timestamp, dst_transaction_hash, withdrawal_id, _, dst_token, _, beneficiary, amount).
